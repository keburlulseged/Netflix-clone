[{"/Users/keburlulseged/projects/netflix-build/src/App.js":"1","/Users/keburlulseged/projects/netflix-build/src/components/Nav.js":"2","/Users/keburlulseged/projects/netflix-build/src/components/Banner.js":"3","/Users/keburlulseged/projects/netflix-build/src/Requests.js":"4","/Users/keburlulseged/projects/netflix-build/src/components/Row.js":"5","/Users/keburlulseged/projects/netflix-build/src/axios.js":"6","/Users/keburlulseged/projects/netflix-build/src/app/store.js":"7","/Users/keburlulseged/projects/netflix-build/src/screens/HomeScreen.js":"8","/Users/keburlulseged/projects/netflix-build/src/screens/LoginScreen.js":"9","/Users/keburlulseged/projects/netflix-build/src/screens/SignUpScreen.js":"10","/Users/keburlulseged/projects/netflix-build/src/features/userSlice.js":"11","/Users/keburlulseged/projects/netflix-build/src/screens/ProfileScreen.js":"12","/Users/keburlulseged/projects/netflix-build/src/index.js":"13","/Users/keburlulseged/projects/netflix-build/src/serviceWorker.js":"14","/Users/keburlulseged/projects/netflix-build/src/screens/PlansScreen.js":"15","/Users/keburlulseged/projects/netflix-build/src/firebase.js":"16"},{"size":1369,"mtime":1612592825000,"results":"17","hashOfConfig":"18"},{"size":1096,"mtime":1612592128000,"results":"19","hashOfConfig":"18"},{"size":1414,"mtime":1612386464000,"results":"20","hashOfConfig":"18"},{"size":698,"mtime":1612385946000,"results":"21","hashOfConfig":"18"},{"size":1111,"mtime":1612389108000,"results":"22","hashOfConfig":"18"},{"size":133,"mtime":1612384392000,"results":"23","hashOfConfig":"18"},{"size":186,"mtime":1612585963000,"results":"24","hashOfConfig":"18"},{"size":915,"mtime":1612573125000,"results":"25","hashOfConfig":"18"},{"size":1444,"mtime":1612576399000,"results":"26","hashOfConfig":"18"},{"size":1415,"mtime":1612580521000,"results":"27","hashOfConfig":"18"},{"size":463,"mtime":1612585744000,"results":"28","hashOfConfig":"18"},{"size":1151,"mtime":1612669981000,"results":"29","hashOfConfig":"18"},{"size":644,"mtime":1612376765000,"results":"30","hashOfConfig":"18"},{"size":5141,"mtime":1612376766000,"results":"31","hashOfConfig":"18"},{"size":3697,"mtime":1612680634000,"results":"32","hashOfConfig":"18"},{"size":547,"mtime":1612579993000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"ssru83",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/keburlulseged/projects/netflix-build/src/App.js",["73"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport ProfileScreen from \"./screens/ProfileScreen\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { auth } from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout, login, selectUser } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  console.log(user);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      console.log(\"IN APP::>>\", user);\r\n      if (userAuth) {\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["74","75"],"/Users/keburlulseged/projects/netflix-build/src/components/Nav.js",[],["76","77"],"/Users/keburlulseged/projects/netflix-build/src/components/Banner.js",[],["78","79"],"/Users/keburlulseged/projects/netflix-build/src/Requests.js",[],["80","81"],"/Users/keburlulseged/projects/netflix-build/src/components/Row.js",[],["82","83"],"/Users/keburlulseged/projects/netflix-build/src/axios.js",[],"/Users/keburlulseged/projects/netflix-build/src/app/store.js",[],"/Users/keburlulseged/projects/netflix-build/src/screens/HomeScreen.js",[],"/Users/keburlulseged/projects/netflix-build/src/screens/LoginScreen.js",[],"/Users/keburlulseged/projects/netflix-build/src/screens/SignUpScreen.js",[],"/Users/keburlulseged/projects/netflix-build/src/features/userSlice.js",[],"/Users/keburlulseged/projects/netflix-build/src/screens/ProfileScreen.js",[],"/Users/keburlulseged/projects/netflix-build/src/index.js",[],"/Users/keburlulseged/projects/netflix-build/src/serviceWorker.js",[],"/Users/keburlulseged/projects/netflix-build/src/screens/PlansScreen.js",["84"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\n\nfunction PlansScreen() {\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    db.collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"subscriptions\")\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach(async (subscription) => {\n          setSubscription({\n            role: subscription.data().role,\n            current_period_end: subscription.data().current_period_end.seconds,\n            current_period_start: subscription.data().current_period_start,\n          });\n        });\n      });\n  }, [user.id]);\n  useEffect(() => {\n    db.collection(\"products\")\n      .where(\"active\", \"==\", true)\n      .get()\n      .then((querySnapshot) => {\n        const products = {};\n        querySnapshot.forEach(async (productDoc) => {\n          products[productDoc.id] = productDoc.data();\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\n          priceSnap.docs.forEach((price) => {\n            products[productDoc.id].prices = {\n              priceId: price.id,\n              priceData: price.data(),\n            };\n          });\n        });\n        setProducts(products);\n      });\n  }, []);\n\n  console.log(products);\n  console.log(subscription);\n\n  const loadCheckout = async (priceId) => {\n    const docRef = await db\n      .collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n        price: priceId,\n        success_url: window.location.origin,\n        cancel_url: window.location.origin,\n      });\n\n    docRef.onSnapshot(async (snap) => {\n      const { error, sessionId } = snap.data();\n\n      if (error) {\n        // Show an error to your customer and\n        // Inspect your Cloud Function logs in the Firebase console\n        alert(`An error eccored: ${error.message}`);\n      }\n\n      if (sessionId) {\n        // We have a session, let's redirect to Checkout\n        // Init Stripe\n\n        const stripe = await loadStripe(\n          \"pk_test_51HzHI5H9oQuu69qkb5N1EJ0GMIQy4s9ZLYnwpOMJP1Hdib5Wv5fGRZkeVvYjj8jk8h25sryExsYfRbP4qzG6LxjI00QCupFDeP\"\n        );\n        stripe.redirectToCheckout({ sessionId });\n      }\n    });\n  };\n\n  return (\n    <div className=\"plansScreen\">\n      <br />\n      {subscription && (\n        <p>\n          Renewal date:{\" \"}\n          {new Date(\n            subscription?.current_period_end * 1000\n          ).toLocaleDateString()}\n        </p>\n      )}\n      {Object.entries(products).map(([productId, productData]) => {\n        // TODO: add logic to check if user subscription is actiove\n        const isCurrentPackage = productData.name\n          ?.toLowerCase()\n          .includes(subscription?.role);\n        return (\n          <div\n            key={productId}\n            className={`${\n              isCurrentPackage && \"plansScreen__plan--disabled\"\n            } plansScreen__plan`}\n          >\n            <div className=\"plansScreen__info\">\n              <h5>{productData.name}</h5>\n              <h6>{productData.description}</h6>\n            </div>\n\n            <button\n              onClick={() =>\n                !isCurrentPackage && loadCheckout(productData.prices.priceId)\n              }\n            >\n              {isCurrentPackage ? \"Current Plan\" : \"Subscribe\"}\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PlansScreen;\n","/Users/keburlulseged/projects/netflix-build/src/firebase.js",[],{"ruleId":"85","severity":1,"message":"86","line":30,"column":6,"nodeType":"87","endLine":30,"endColumn":16,"suggestions":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"91","replacedBy":"94"},{"ruleId":"89","replacedBy":"95"},{"ruleId":"91","replacedBy":"96"},{"ruleId":"89","replacedBy":"97"},{"ruleId":"91","replacedBy":"98"},{"ruleId":"89","replacedBy":"99"},{"ruleId":"91","replacedBy":"100"},{"ruleId":"85","severity":1,"message":"101","line":27,"column":6,"nodeType":"87","endLine":27,"endColumn":15,"suggestions":"102"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-native-reassign",["104"],"no-negated-in-lhs",["105"],["104"],["105"],["104"],["105"],["104"],["105"],["104"],["105"],"React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["106"],{"desc":"107","fix":"108"},"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [dispatch, user]",{"range":"111","text":"112"},"Update the dependencies array to be: [user.id, user.uid]",{"range":"113","text":"114"},[944,954],"[dispatch, user]",[904,913],"[user.id, user.uid]"]